/*
 * Visier Profile Management APIs
 * Visier APIs for managing the profiles assigned to users
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessibleTenantProfileAssignmentRequestDTO;
import com.konfigthis.client.model.AccessibleTenantProfileAssignmentResponseDTO;
import com.konfigthis.client.model.AccessibleTenantProfileRevokeRequestDTO;
import com.konfigthis.client.model.AccessibleTenantProfileRevokeResponseDTO;
import com.konfigthis.client.model.AllProfileAssignedForAccessibleTenantDTO;
import com.konfigthis.client.model.AllProfileAssignedForLocalTenantDTO;
import com.konfigthis.client.model.LocalTenantProfileAssignmentRequestDTO;
import com.konfigthis.client.model.LocalTenantProfileAssignmentResponseDTO;
import com.konfigthis.client.model.LocalTenantProfileRevokeRequestDTO;
import com.konfigthis.client.model.LocalTenantProfileRevokeResponseDTO;
import com.konfigthis.client.model.ProfileGetAPIResponseDTO;
import com.konfigthis.client.model.ProfilesGetAPIResponseDTO;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TargetTenantCodeDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProfileManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfileManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProfileManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignAnalyticProfileCall(String profileId, AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessibleTenantProfileAssignmentRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles/accessible-tenants/{profileId}/assign"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignAnalyticProfileValidateBeforeCall(String profileId, AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling assignAnalyticProfile(Async)");
        }

        // verify the required parameter 'accessibleTenantProfileAssignmentRequestDTO' is set
        if (accessibleTenantProfileAssignmentRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'accessibleTenantProfileAssignmentRequestDTO' when calling assignAnalyticProfile(Async)");
        }

        return assignAnalyticProfileCall(profileId, accessibleTenantProfileAssignmentRequestDTO, _callback);

    }


    private ApiResponse<AccessibleTenantProfileAssignmentResponseDTO> assignAnalyticProfileWithHttpInfo(String profileId, AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = assignAnalyticProfileValidateBeforeCall(profileId, accessibleTenantProfileAssignmentRequestDTO, null);
        Type localVarReturnType = new TypeToken<AccessibleTenantProfileAssignmentResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignAnalyticProfileAsync(String profileId, AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO, final ApiCallback<AccessibleTenantProfileAssignmentResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignAnalyticProfileValidateBeforeCall(profileId, accessibleTenantProfileAssignmentRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<AccessibleTenantProfileAssignmentResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignAnalyticProfileRequestBuilder {
        private final String profileId;
        private List<String> targetUserIds;
        private List<TargetTenantCodeDTO> targetTenantCodes;
        private String validityStartTime;
        private String validityEndTime;

        private AssignAnalyticProfileRequestBuilder(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Set targetUserIds
         * @param targetUserIds A list of users to assign this profile. (optional)
         * @return AssignAnalyticProfileRequestBuilder
         */
        public AssignAnalyticProfileRequestBuilder targetUserIds(List<String> targetUserIds) {
            this.targetUserIds = targetUserIds;
            return this;
        }
        
        /**
         * Set targetTenantCodes
         * @param targetTenantCodes A list of objects representing the  analytic tenants for profiles assigned to the users. (optional)
         * @return AssignAnalyticProfileRequestBuilder
         */
        public AssignAnalyticProfileRequestBuilder targetTenantCodes(List<TargetTenantCodeDTO> targetTenantCodes) {
            this.targetTenantCodes = targetTenantCodes;
            return this;
        }
        
        /**
         * Set validityStartTime
         * @param validityStartTime An inclusive date-time when this profile is active. (optional)
         * @return AssignAnalyticProfileRequestBuilder
         */
        public AssignAnalyticProfileRequestBuilder validityStartTime(String validityStartTime) {
            this.validityStartTime = validityStartTime;
            return this;
        }
        
        /**
         * Set validityEndTime
         * @param validityEndTime An exclusive date-time when this profile is no longer active. (optional)
         * @return AssignAnalyticProfileRequestBuilder
         */
        public AssignAnalyticProfileRequestBuilder validityEndTime(String validityEndTime) {
            this.validityEndTime = validityEndTime;
            return this;
        }
        
        /**
         * Build call for assignAnalyticProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO = buildBodyParams();
            return assignAnalyticProfileCall(profileId, accessibleTenantProfileAssignmentRequestDTO, _callback);
        }

        private AccessibleTenantProfileAssignmentRequestDTO buildBodyParams() {
            AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO = new AccessibleTenantProfileAssignmentRequestDTO();
            accessibleTenantProfileAssignmentRequestDTO.targetUserIds(this.targetUserIds);
            accessibleTenantProfileAssignmentRequestDTO.targetTenantCodes(this.targetTenantCodes);
            accessibleTenantProfileAssignmentRequestDTO.validityStartTime(this.validityStartTime);
            accessibleTenantProfileAssignmentRequestDTO.validityEndTime(this.validityEndTime);
            return accessibleTenantProfileAssignmentRequestDTO;
        }

        /**
         * Execute assignAnalyticProfile request
         * @return AccessibleTenantProfileAssignmentResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AccessibleTenantProfileAssignmentResponseDTO execute() throws ApiException {
            AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO = buildBodyParams();
            ApiResponse<AccessibleTenantProfileAssignmentResponseDTO> localVarResp = assignAnalyticProfileWithHttpInfo(profileId, accessibleTenantProfileAssignmentRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignAnalyticProfile request with HTTP info returned
         * @return ApiResponse&lt;AccessibleTenantProfileAssignmentResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessibleTenantProfileAssignmentResponseDTO> executeWithHttpInfo() throws ApiException {
            AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO = buildBodyParams();
            return assignAnalyticProfileWithHttpInfo(profileId, accessibleTenantProfileAssignmentRequestDTO);
        }

        /**
         * Execute assignAnalyticProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessibleTenantProfileAssignmentResponseDTO> _callback) throws ApiException {
            AccessibleTenantProfileAssignmentRequestDTO accessibleTenantProfileAssignmentRequestDTO = buildBodyParams();
            return assignAnalyticProfileAsync(profileId, accessibleTenantProfileAssignmentRequestDTO, _callback);
        }
    }

    /**
     * Assign an analytic tenant profile to administrating tenant users
     * This API allows you to assign an analytic tenant profile to a list of administrating tenant users  for a list of analytic tenants.   Note:   - Administrating tenants only.   - You can revoke a profile from a user with this request by updating the validityEndTime to be     \&quot;less than\&quot; the current time (that is, in the past).
     * @param profileId The ID of the profile to assign. (required)
     * @param accessibleTenantProfileAssignmentRequestDTO  (required)
     * @return AssignAnalyticProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AssignAnalyticProfileRequestBuilder assignAnalyticProfile(String profileId) throws IllegalArgumentException {
        if (profileId == null) throw new IllegalArgumentException("\"profileId\" is required but got null");
            

        return new AssignAnalyticProfileRequestBuilder(profileId);
    }
    private okhttp3.Call assignProfileCall(String profileId, LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localTenantProfileAssignmentRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles/{profileId}/assign"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignProfileValidateBeforeCall(String profileId, LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling assignProfile(Async)");
        }

        // verify the required parameter 'localTenantProfileAssignmentRequestDTO' is set
        if (localTenantProfileAssignmentRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'localTenantProfileAssignmentRequestDTO' when calling assignProfile(Async)");
        }

        return assignProfileCall(profileId, localTenantProfileAssignmentRequestDTO, _callback);

    }


    private ApiResponse<LocalTenantProfileAssignmentResponseDTO> assignProfileWithHttpInfo(String profileId, LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = assignProfileValidateBeforeCall(profileId, localTenantProfileAssignmentRequestDTO, null);
        Type localVarReturnType = new TypeToken<LocalTenantProfileAssignmentResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignProfileAsync(String profileId, LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO, final ApiCallback<LocalTenantProfileAssignmentResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignProfileValidateBeforeCall(profileId, localTenantProfileAssignmentRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<LocalTenantProfileAssignmentResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignProfileRequestBuilder {
        private final String profileId;
        private List<String> targetUserIds;
        private String validityStartTime;
        private String validityEndTime;

        private AssignProfileRequestBuilder(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Set targetUserIds
         * @param targetUserIds A list of users to assign this profile. (optional)
         * @return AssignProfileRequestBuilder
         */
        public AssignProfileRequestBuilder targetUserIds(List<String> targetUserIds) {
            this.targetUserIds = targetUserIds;
            return this;
        }
        
        /**
         * Set validityStartTime
         * @param validityStartTime An inclusive date-time when this profile is active. (optional)
         * @return AssignProfileRequestBuilder
         */
        public AssignProfileRequestBuilder validityStartTime(String validityStartTime) {
            this.validityStartTime = validityStartTime;
            return this;
        }
        
        /**
         * Set validityEndTime
         * @param validityEndTime An exclusive date-time when this profile is no longer active. (optional)
         * @return AssignProfileRequestBuilder
         */
        public AssignProfileRequestBuilder validityEndTime(String validityEndTime) {
            this.validityEndTime = validityEndTime;
            return this;
        }
        
        /**
         * Build call for assignProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO = buildBodyParams();
            return assignProfileCall(profileId, localTenantProfileAssignmentRequestDTO, _callback);
        }

        private LocalTenantProfileAssignmentRequestDTO buildBodyParams() {
            LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO = new LocalTenantProfileAssignmentRequestDTO();
            localTenantProfileAssignmentRequestDTO.targetUserIds(this.targetUserIds);
            localTenantProfileAssignmentRequestDTO.validityStartTime(this.validityStartTime);
            localTenantProfileAssignmentRequestDTO.validityEndTime(this.validityEndTime);
            return localTenantProfileAssignmentRequestDTO;
        }

        /**
         * Execute assignProfile request
         * @return LocalTenantProfileAssignmentResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public LocalTenantProfileAssignmentResponseDTO execute() throws ApiException {
            LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO = buildBodyParams();
            ApiResponse<LocalTenantProfileAssignmentResponseDTO> localVarResp = assignProfileWithHttpInfo(profileId, localTenantProfileAssignmentRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignProfile request with HTTP info returned
         * @return ApiResponse&lt;LocalTenantProfileAssignmentResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalTenantProfileAssignmentResponseDTO> executeWithHttpInfo() throws ApiException {
            LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO = buildBodyParams();
            return assignProfileWithHttpInfo(profileId, localTenantProfileAssignmentRequestDTO);
        }

        /**
         * Execute assignProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalTenantProfileAssignmentResponseDTO> _callback) throws ApiException {
            LocalTenantProfileAssignmentRequestDTO localTenantProfileAssignmentRequestDTO = buildBodyParams();
            return assignProfileAsync(profileId, localTenantProfileAssignmentRequestDTO, _callback);
        }
    }

    /**
     * Assign a profile to a list of users
     * This API allows you to assign a profile to a list of users. For administrating tenants,  this assigns an administrating tenant profile to a list of users.
     * @param profileId The ID of the profile to assign to a list of users. (required)
     * @param localTenantProfileAssignmentRequestDTO  (required)
     * @return AssignProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AssignProfileRequestBuilder assignProfile(String profileId) throws IllegalArgumentException {
        if (profileId == null) throw new IllegalArgumentException("\"profileId\" is required but got null");
            

        return new AssignProfileRequestBuilder(profileId);
    }
    private okhttp3.Call getAllProfilesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProfilesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllProfilesCall(_callback);

    }


    private ApiResponse<ProfilesGetAPIResponseDTO> getAllProfilesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllProfilesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ProfilesGetAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllProfilesAsync(final ApiCallback<ProfilesGetAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProfilesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ProfilesGetAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllProfilesRequestBuilder {

        private GetAllProfilesRequestBuilder() {
        }

        /**
         * Build call for getAllProfiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllProfilesCall(_callback);
        }


        /**
         * Execute getAllProfiles request
         * @return ProfilesGetAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ProfilesGetAPIResponseDTO execute() throws ApiException {
            ApiResponse<ProfilesGetAPIResponseDTO> localVarResp = getAllProfilesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllProfiles request with HTTP info returned
         * @return ApiResponse&lt;ProfilesGetAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfilesGetAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getAllProfilesWithHttpInfo();
        }

        /**
         * Execute getAllProfiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfilesGetAPIResponseDTO> _callback) throws ApiException {
            return getAllProfilesAsync(_callback);
        }
    }

    /**
     * Retrieve a list of all profiles
     * This API allows you to get a list of all available profiles. For administrating tenants,  this retrieves all administrating tenant profiles.
     * @return GetAllProfilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllProfilesRequestBuilder getAllProfiles() throws IllegalArgumentException {
        return new GetAllProfilesRequestBuilder();
    }
    private okhttp3.Call getAnalyticProfileDetailCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles/accessible-tenants/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticProfileDetailValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getAnalyticProfileDetail(Async)");
        }

        return getAnalyticProfileDetailCall(profileId, _callback);

    }


    private ApiResponse<ProfileGetAPIResponseDTO> getAnalyticProfileDetailWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticProfileDetailValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<ProfileGetAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAnalyticProfileDetailAsync(String profileId, final ApiCallback<ProfileGetAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticProfileDetailValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<ProfileGetAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAnalyticProfileDetailRequestBuilder {
        private final String profileId;

        private GetAnalyticProfileDetailRequestBuilder(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Build call for getAnalyticProfileDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAnalyticProfileDetailCall(profileId, _callback);
        }


        /**
         * Execute getAnalyticProfileDetail request
         * @return ProfileGetAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ProfileGetAPIResponseDTO execute() throws ApiException {
            ApiResponse<ProfileGetAPIResponseDTO> localVarResp = getAnalyticProfileDetailWithHttpInfo(profileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAnalyticProfileDetail request with HTTP info returned
         * @return ApiResponse&lt;ProfileGetAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileGetAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getAnalyticProfileDetailWithHttpInfo(profileId);
        }

        /**
         * Execute getAnalyticProfileDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileGetAPIResponseDTO> _callback) throws ApiException {
            return getAnalyticProfileDetailAsync(profileId, _callback);
        }
    }

    /**
     * Retrieve the details of an analytic tenant profile
     * This API allows you to get the details of an analytic tenant profile.   Note: Administrating tenants only.
     * @param profileId The ID of the profile to retrieve details for. (required)
     * @return GetAnalyticProfileDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetAnalyticProfileDetailRequestBuilder getAnalyticProfileDetail(String profileId) throws IllegalArgumentException {
        if (profileId == null) throw new IllegalArgumentException("\"profileId\" is required but got null");
            

        return new GetAnalyticProfileDetailRequestBuilder(profileId);
    }
    private okhttp3.Call getAnalyticProfilesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles/accessible-tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticProfilesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAnalyticProfilesCall(_callback);

    }


    private ApiResponse<ProfilesGetAPIResponseDTO> getAnalyticProfilesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAnalyticProfilesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ProfilesGetAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAnalyticProfilesAsync(final ApiCallback<ProfilesGetAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticProfilesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ProfilesGetAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAnalyticProfilesRequestBuilder {

        private GetAnalyticProfilesRequestBuilder() {
        }

        /**
         * Build call for getAnalyticProfiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAnalyticProfilesCall(_callback);
        }


        /**
         * Execute getAnalyticProfiles request
         * @return ProfilesGetAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ProfilesGetAPIResponseDTO execute() throws ApiException {
            ApiResponse<ProfilesGetAPIResponseDTO> localVarResp = getAnalyticProfilesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAnalyticProfiles request with HTTP info returned
         * @return ApiResponse&lt;ProfilesGetAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfilesGetAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getAnalyticProfilesWithHttpInfo();
        }

        /**
         * Execute getAnalyticProfiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfilesGetAPIResponseDTO> _callback) throws ApiException {
            return getAnalyticProfilesAsync(_callback);
        }
    }

    /**
     * Retrieve a list of analytic tenant profiles
     * This API allows you to retrieve a list of profiles available for analytic tenants.   Note: Administrating tenants only.
     * @return GetAnalyticProfilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetAnalyticProfilesRequestBuilder getAnalyticProfiles() throws IllegalArgumentException {
        return new GetAnalyticProfilesRequestBuilder();
    }
    private okhttp3.Call getAnalyticUserProfileCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/{userId}/accessible-tenant-profiles"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticUserProfileValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAnalyticUserProfile(Async)");
        }

        return getAnalyticUserProfileCall(userId, _callback);

    }


    private ApiResponse<AllProfileAssignedForAccessibleTenantDTO> getAnalyticUserProfileWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticUserProfileValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<AllProfileAssignedForAccessibleTenantDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAnalyticUserProfileAsync(String userId, final ApiCallback<AllProfileAssignedForAccessibleTenantDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticUserProfileValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<AllProfileAssignedForAccessibleTenantDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAnalyticUserProfileRequestBuilder {
        private final String userId;

        private GetAnalyticUserProfileRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for getAnalyticUserProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAnalyticUserProfileCall(userId, _callback);
        }


        /**
         * Execute getAnalyticUserProfile request
         * @return AllProfileAssignedForAccessibleTenantDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AllProfileAssignedForAccessibleTenantDTO execute() throws ApiException {
            ApiResponse<AllProfileAssignedForAccessibleTenantDTO> localVarResp = getAnalyticUserProfileWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAnalyticUserProfile request with HTTP info returned
         * @return ApiResponse&lt;AllProfileAssignedForAccessibleTenantDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AllProfileAssignedForAccessibleTenantDTO> executeWithHttpInfo() throws ApiException {
            return getAnalyticUserProfileWithHttpInfo(userId);
        }

        /**
         * Execute getAnalyticUserProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AllProfileAssignedForAccessibleTenantDTO> _callback) throws ApiException {
            return getAnalyticUserProfileAsync(userId, _callback);
        }
    }

    /**
     * Retrieve an administrating tenant user&#39;s analytic tenant profiles
     * This API allows you to retrieve a specified user&#39;s assigned profiles for analytic tenants.   Note: Administrating tenants only.
     * @param userId The ID of the user you want to retrieve. (required)
     * @return GetAnalyticUserProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetAnalyticUserProfileRequestBuilder getAnalyticUserProfile(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetAnalyticUserProfileRequestBuilder(userId);
    }
    private okhttp3.Call getProfileDetailCall(String profileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles/{profileId}"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileDetailValidateBeforeCall(String profileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getProfileDetail(Async)");
        }

        return getProfileDetailCall(profileId, _callback);

    }


    private ApiResponse<ProfileGetAPIResponseDTO> getProfileDetailWithHttpInfo(String profileId) throws ApiException {
        okhttp3.Call localVarCall = getProfileDetailValidateBeforeCall(profileId, null);
        Type localVarReturnType = new TypeToken<ProfileGetAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileDetailAsync(String profileId, final ApiCallback<ProfileGetAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileDetailValidateBeforeCall(profileId, _callback);
        Type localVarReturnType = new TypeToken<ProfileGetAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileDetailRequestBuilder {
        private final String profileId;

        private GetProfileDetailRequestBuilder(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Build call for getProfileDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileDetailCall(profileId, _callback);
        }


        /**
         * Execute getProfileDetail request
         * @return ProfileGetAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ProfileGetAPIResponseDTO execute() throws ApiException {
            ApiResponse<ProfileGetAPIResponseDTO> localVarResp = getProfileDetailWithHttpInfo(profileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfileDetail request with HTTP info returned
         * @return ApiResponse&lt;ProfileGetAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileGetAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getProfileDetailWithHttpInfo(profileId);
        }

        /**
         * Execute getProfileDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileGetAPIResponseDTO> _callback) throws ApiException {
            return getProfileDetailAsync(profileId, _callback);
        }
    }

    /**
     * Retrieve the details of a profile
     * This API allows you to get the details of a specific profile. For administrating tenants, this retrieves  the details of administrating tenant profiles.
     * @param profileId The ID of the profile to retrieve details for. (required)
     * @return GetProfileDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetProfileDetailRequestBuilder getProfileDetail(String profileId) throws IllegalArgumentException {
        if (profileId == null) throw new IllegalArgumentException("\"profileId\" is required but got null");
            

        return new GetProfileDetailRequestBuilder(profileId);
    }
    private okhttp3.Call getUserProfileCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/{userId}/profiles"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProfileValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserProfile(Async)");
        }

        return getUserProfileCall(userId, _callback);

    }


    private ApiResponse<AllProfileAssignedForLocalTenantDTO> getUserProfileWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<AllProfileAssignedForLocalTenantDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserProfileAsync(String userId, final ApiCallback<AllProfileAssignedForLocalTenantDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<AllProfileAssignedForLocalTenantDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserProfileRequestBuilder {
        private final String userId;

        private GetUserProfileRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Build call for getUserProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserProfileCall(userId, _callback);
        }


        /**
         * Execute getUserProfile request
         * @return AllProfileAssignedForLocalTenantDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AllProfileAssignedForLocalTenantDTO execute() throws ApiException {
            ApiResponse<AllProfileAssignedForLocalTenantDTO> localVarResp = getUserProfileWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserProfile request with HTTP info returned
         * @return ApiResponse&lt;AllProfileAssignedForLocalTenantDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AllProfileAssignedForLocalTenantDTO> executeWithHttpInfo() throws ApiException {
            return getUserProfileWithHttpInfo(userId);
        }

        /**
         * Execute getUserProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AllProfileAssignedForLocalTenantDTO> _callback) throws ApiException {
            return getUserProfileAsync(userId, _callback);
        }
    }

    /**
     * Retrieve a user&#39;s profiles
     * This API allows you to retrieve a specified user&#39;s assigned profiles. For administrating tenants,  this retrieves a user&#39;s administrating tenant profiles.
     * @param userId The ID of the user you want to retrieve. (required)
     * @return GetUserProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserProfileRequestBuilder getUserProfile(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserProfileRequestBuilder(userId);
    }
    private okhttp3.Call removeAnalyticProfileCall(String profileId, AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessibleTenantProfileRevokeRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles/accessible-tenants/{profileId}/remove"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAnalyticProfileValidateBeforeCall(String profileId, AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling removeAnalyticProfile(Async)");
        }

        // verify the required parameter 'accessibleTenantProfileRevokeRequestDTO' is set
        if (accessibleTenantProfileRevokeRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'accessibleTenantProfileRevokeRequestDTO' when calling removeAnalyticProfile(Async)");
        }

        return removeAnalyticProfileCall(profileId, accessibleTenantProfileRevokeRequestDTO, _callback);

    }


    private ApiResponse<AccessibleTenantProfileRevokeResponseDTO> removeAnalyticProfileWithHttpInfo(String profileId, AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = removeAnalyticProfileValidateBeforeCall(profileId, accessibleTenantProfileRevokeRequestDTO, null);
        Type localVarReturnType = new TypeToken<AccessibleTenantProfileRevokeResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAnalyticProfileAsync(String profileId, AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO, final ApiCallback<AccessibleTenantProfileRevokeResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAnalyticProfileValidateBeforeCall(profileId, accessibleTenantProfileRevokeRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<AccessibleTenantProfileRevokeResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveAnalyticProfileRequestBuilder {
        private final String profileId;
        private List<String> targetUserIds;
        private List<TargetTenantCodeDTO> targetTenantCodes;

        private RemoveAnalyticProfileRequestBuilder(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Set targetUserIds
         * @param targetUserIds A list of users to remove this profile from. (optional)
         * @return RemoveAnalyticProfileRequestBuilder
         */
        public RemoveAnalyticProfileRequestBuilder targetUserIds(List<String> targetUserIds) {
            this.targetUserIds = targetUserIds;
            return this;
        }
        
        /**
         * Set targetTenantCodes
         * @param targetTenantCodes A list of objects representing the  analytic tenants for removing profiles from each target user ID. (optional)
         * @return RemoveAnalyticProfileRequestBuilder
         */
        public RemoveAnalyticProfileRequestBuilder targetTenantCodes(List<TargetTenantCodeDTO> targetTenantCodes) {
            this.targetTenantCodes = targetTenantCodes;
            return this;
        }
        
        /**
         * Build call for removeAnalyticProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO = buildBodyParams();
            return removeAnalyticProfileCall(profileId, accessibleTenantProfileRevokeRequestDTO, _callback);
        }

        private AccessibleTenantProfileRevokeRequestDTO buildBodyParams() {
            AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO = new AccessibleTenantProfileRevokeRequestDTO();
            accessibleTenantProfileRevokeRequestDTO.targetUserIds(this.targetUserIds);
            accessibleTenantProfileRevokeRequestDTO.targetTenantCodes(this.targetTenantCodes);
            return accessibleTenantProfileRevokeRequestDTO;
        }

        /**
         * Execute removeAnalyticProfile request
         * @return AccessibleTenantProfileRevokeResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AccessibleTenantProfileRevokeResponseDTO execute() throws ApiException {
            AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO = buildBodyParams();
            ApiResponse<AccessibleTenantProfileRevokeResponseDTO> localVarResp = removeAnalyticProfileWithHttpInfo(profileId, accessibleTenantProfileRevokeRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeAnalyticProfile request with HTTP info returned
         * @return ApiResponse&lt;AccessibleTenantProfileRevokeResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessibleTenantProfileRevokeResponseDTO> executeWithHttpInfo() throws ApiException {
            AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO = buildBodyParams();
            return removeAnalyticProfileWithHttpInfo(profileId, accessibleTenantProfileRevokeRequestDTO);
        }

        /**
         * Execute removeAnalyticProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessibleTenantProfileRevokeResponseDTO> _callback) throws ApiException {
            AccessibleTenantProfileRevokeRequestDTO accessibleTenantProfileRevokeRequestDTO = buildBodyParams();
            return removeAnalyticProfileAsync(profileId, accessibleTenantProfileRevokeRequestDTO, _callback);
        }
    }

    /**
     * Remove an analytic tenant profile from administrating tenant users
     * This API allows you to remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.   Note: Administrating tenants only.
     * @param profileId The ID of the profile to remove. (required)
     * @param accessibleTenantProfileRevokeRequestDTO  (required)
     * @return RemoveAnalyticProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAnalyticProfileRequestBuilder removeAnalyticProfile(String profileId) throws IllegalArgumentException {
        if (profileId == null) throw new IllegalArgumentException("\"profileId\" is required but got null");
            

        return new RemoveAnalyticProfileRequestBuilder(profileId);
    }
    private okhttp3.Call removeProfileCall(String profileId, LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localTenantProfileRevokeRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/profiles/{profileId}/remove"
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProfileValidateBeforeCall(String profileId, LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling removeProfile(Async)");
        }

        // verify the required parameter 'localTenantProfileRevokeRequestDTO' is set
        if (localTenantProfileRevokeRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'localTenantProfileRevokeRequestDTO' when calling removeProfile(Async)");
        }

        return removeProfileCall(profileId, localTenantProfileRevokeRequestDTO, _callback);

    }


    private ApiResponse<LocalTenantProfileRevokeResponseDTO> removeProfileWithHttpInfo(String profileId, LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = removeProfileValidateBeforeCall(profileId, localTenantProfileRevokeRequestDTO, null);
        Type localVarReturnType = new TypeToken<LocalTenantProfileRevokeResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeProfileAsync(String profileId, LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO, final ApiCallback<LocalTenantProfileRevokeResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProfileValidateBeforeCall(profileId, localTenantProfileRevokeRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<LocalTenantProfileRevokeResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveProfileRequestBuilder {
        private final String profileId;
        private List<String> targetUserIds;

        private RemoveProfileRequestBuilder(String profileId) {
            this.profileId = profileId;
        }

        /**
         * Set targetUserIds
         * @param targetUserIds A list of users to remove this profile from. (optional)
         * @return RemoveProfileRequestBuilder
         */
        public RemoveProfileRequestBuilder targetUserIds(List<String> targetUserIds) {
            this.targetUserIds = targetUserIds;
            return this;
        }
        
        /**
         * Build call for removeProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO = buildBodyParams();
            return removeProfileCall(profileId, localTenantProfileRevokeRequestDTO, _callback);
        }

        private LocalTenantProfileRevokeRequestDTO buildBodyParams() {
            LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO = new LocalTenantProfileRevokeRequestDTO();
            localTenantProfileRevokeRequestDTO.targetUserIds(this.targetUserIds);
            return localTenantProfileRevokeRequestDTO;
        }

        /**
         * Execute removeProfile request
         * @return LocalTenantProfileRevokeResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public LocalTenantProfileRevokeResponseDTO execute() throws ApiException {
            LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO = buildBodyParams();
            ApiResponse<LocalTenantProfileRevokeResponseDTO> localVarResp = removeProfileWithHttpInfo(profileId, localTenantProfileRevokeRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeProfile request with HTTP info returned
         * @return ApiResponse&lt;LocalTenantProfileRevokeResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalTenantProfileRevokeResponseDTO> executeWithHttpInfo() throws ApiException {
            LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO = buildBodyParams();
            return removeProfileWithHttpInfo(profileId, localTenantProfileRevokeRequestDTO);
        }

        /**
         * Execute removeProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalTenantProfileRevokeResponseDTO> _callback) throws ApiException {
            LocalTenantProfileRevokeRequestDTO localTenantProfileRevokeRequestDTO = buildBodyParams();
            return removeProfileAsync(profileId, localTenantProfileRevokeRequestDTO, _callback);
        }
    }

    /**
     * Remove a profile from a list of users
     * This API allows you to remove a profile from a list of users. For administrating tenants, this  removes an administrating tenant profile from a list of users.
     * @param profileId The ID of the profile to remove to a list of users. (required)
     * @param localTenantProfileRevokeRequestDTO  (required)
     * @return RemoveProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveProfileRequestBuilder removeProfile(String profileId) throws IllegalArgumentException {
        if (profileId == null) throw new IllegalArgumentException("\"profileId\" is required but got null");
            

        return new RemoveProfileRequestBuilder(profileId);
    }
}
