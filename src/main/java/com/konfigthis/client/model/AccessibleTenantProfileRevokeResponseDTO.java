/*
 * Visier Profile Management APIs
 * Visier APIs for managing the profiles assigned to users
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReducedTenantCodeErrorDTO;
import com.konfigthis.client.model.ReducedUserIdErrorDTO;
import com.konfigthis.client.model.SuccessfulLocalTenantProfileAssignmentDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AccessibleTenantProfileRevokeResponseDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccessibleTenantProfileRevokeResponseDTO {
  public static final String SERIALIZED_NAME_BAD_TENANT_CODES = "badTenantCodes";
  @SerializedName(SERIALIZED_NAME_BAD_TENANT_CODES)
  private List<ReducedTenantCodeErrorDTO> badTenantCodes = null;

  public static final String SERIALIZED_NAME_BAD_USER_IDS = "badUserIds";
  @SerializedName(SERIALIZED_NAME_BAD_USER_IDS)
  private List<ReducedUserIdErrorDTO> badUserIds = null;

  public static final String SERIALIZED_NAME_UNAFFECTED_USERS = "unaffectedUsers";
  @SerializedName(SERIALIZED_NAME_UNAFFECTED_USERS)
  private List<SuccessfulLocalTenantProfileAssignmentDTO> unaffectedUsers = null;

  public static final String SERIALIZED_NAME_SUCCEEDED = "succeeded";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED)
  private List<SuccessfulLocalTenantProfileAssignmentDTO> succeeded = null;

  public AccessibleTenantProfileRevokeResponseDTO() {
  }

  public AccessibleTenantProfileRevokeResponseDTO badTenantCodes(List<ReducedTenantCodeErrorDTO> badTenantCodes) {
    
    
    
    
    this.badTenantCodes = badTenantCodes;
    return this;
  }

  public AccessibleTenantProfileRevokeResponseDTO addBadTenantCodesItem(ReducedTenantCodeErrorDTO badTenantCodesItem) {
    if (this.badTenantCodes == null) {
      this.badTenantCodes = new ArrayList<>();
    }
    this.badTenantCodes.add(badTenantCodesItem);
    return this;
  }

   /**
   * A list of objects representing any tenants that returned errors.
   * @return badTenantCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of objects representing any tenants that returned errors.")

  public List<ReducedTenantCodeErrorDTO> getBadTenantCodes() {
    return badTenantCodes;
  }


  public void setBadTenantCodes(List<ReducedTenantCodeErrorDTO> badTenantCodes) {
    
    
    
    this.badTenantCodes = badTenantCodes;
  }


  public AccessibleTenantProfileRevokeResponseDTO badUserIds(List<ReducedUserIdErrorDTO> badUserIds) {
    
    
    
    
    this.badUserIds = badUserIds;
    return this;
  }

  public AccessibleTenantProfileRevokeResponseDTO addBadUserIdsItem(ReducedUserIdErrorDTO badUserIdsItem) {
    if (this.badUserIds == null) {
      this.badUserIds = new ArrayList<>();
    }
    this.badUserIds.add(badUserIdsItem);
    return this;
  }

   /**
   * A list of objects representing the user IDs that may not be valid.
   * @return badUserIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of objects representing the user IDs that may not be valid.")

  public List<ReducedUserIdErrorDTO> getBadUserIds() {
    return badUserIds;
  }


  public void setBadUserIds(List<ReducedUserIdErrorDTO> badUserIds) {
    
    
    
    this.badUserIds = badUserIds;
  }


  public AccessibleTenantProfileRevokeResponseDTO unaffectedUsers(List<SuccessfulLocalTenantProfileAssignmentDTO> unaffectedUsers) {
    
    
    
    
    this.unaffectedUsers = unaffectedUsers;
    return this;
  }

  public AccessibleTenantProfileRevokeResponseDTO addUnaffectedUsersItem(SuccessfulLocalTenantProfileAssignmentDTO unaffectedUsersItem) {
    if (this.unaffectedUsers == null) {
      this.unaffectedUsers = new ArrayList<>();
    }
    this.unaffectedUsers.add(unaffectedUsersItem);
    return this;
  }

   /**
   * A list of objects representing the valid user IDs that were not affected.
   * @return unaffectedUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of objects representing the valid user IDs that were not affected.")

  public List<SuccessfulLocalTenantProfileAssignmentDTO> getUnaffectedUsers() {
    return unaffectedUsers;
  }


  public void setUnaffectedUsers(List<SuccessfulLocalTenantProfileAssignmentDTO> unaffectedUsers) {
    
    
    
    this.unaffectedUsers = unaffectedUsers;
  }


  public AccessibleTenantProfileRevokeResponseDTO succeeded(List<SuccessfulLocalTenantProfileAssignmentDTO> succeeded) {
    
    
    
    
    this.succeeded = succeeded;
    return this;
  }

  public AccessibleTenantProfileRevokeResponseDTO addSucceededItem(SuccessfulLocalTenantProfileAssignmentDTO succeededItem) {
    if (this.succeeded == null) {
      this.succeeded = new ArrayList<>();
    }
    this.succeeded.add(succeededItem);
    return this;
  }

   /**
   * A list of objects representing the valid user IDs that succeeded.
   * @return succeeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of objects representing the valid user IDs that succeeded.")

  public List<SuccessfulLocalTenantProfileAssignmentDTO> getSucceeded() {
    return succeeded;
  }


  public void setSucceeded(List<SuccessfulLocalTenantProfileAssignmentDTO> succeeded) {
    
    
    
    this.succeeded = succeeded;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccessibleTenantProfileRevokeResponseDTO instance itself
   */
  public AccessibleTenantProfileRevokeResponseDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessibleTenantProfileRevokeResponseDTO accessibleTenantProfileRevokeResponseDTO = (AccessibleTenantProfileRevokeResponseDTO) o;
    return Objects.equals(this.badTenantCodes, accessibleTenantProfileRevokeResponseDTO.badTenantCodes) &&
        Objects.equals(this.badUserIds, accessibleTenantProfileRevokeResponseDTO.badUserIds) &&
        Objects.equals(this.unaffectedUsers, accessibleTenantProfileRevokeResponseDTO.unaffectedUsers) &&
        Objects.equals(this.succeeded, accessibleTenantProfileRevokeResponseDTO.succeeded)&&
        Objects.equals(this.additionalProperties, accessibleTenantProfileRevokeResponseDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badTenantCodes, badUserIds, unaffectedUsers, succeeded, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessibleTenantProfileRevokeResponseDTO {\n");
    sb.append("    badTenantCodes: ").append(toIndentedString(badTenantCodes)).append("\n");
    sb.append("    badUserIds: ").append(toIndentedString(badUserIds)).append("\n");
    sb.append("    unaffectedUsers: ").append(toIndentedString(unaffectedUsers)).append("\n");
    sb.append("    succeeded: ").append(toIndentedString(succeeded)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badTenantCodes");
    openapiFields.add("badUserIds");
    openapiFields.add("unaffectedUsers");
    openapiFields.add("succeeded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccessibleTenantProfileRevokeResponseDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccessibleTenantProfileRevokeResponseDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessibleTenantProfileRevokeResponseDTO is not found in the empty JSON string", AccessibleTenantProfileRevokeResponseDTO.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("badTenantCodes") != null && !jsonObj.get("badTenantCodes").isJsonNull()) {
        JsonArray jsonArraybadTenantCodes = jsonObj.getAsJsonArray("badTenantCodes");
        if (jsonArraybadTenantCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("badTenantCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `badTenantCodes` to be an array in the JSON string but got `%s`", jsonObj.get("badTenantCodes").toString()));
          }

          // validate the optional field `badTenantCodes` (array)
          for (int i = 0; i < jsonArraybadTenantCodes.size(); i++) {
            ReducedTenantCodeErrorDTO.validateJsonObject(jsonArraybadTenantCodes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("badUserIds") != null && !jsonObj.get("badUserIds").isJsonNull()) {
        JsonArray jsonArraybadUserIds = jsonObj.getAsJsonArray("badUserIds");
        if (jsonArraybadUserIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("badUserIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `badUserIds` to be an array in the JSON string but got `%s`", jsonObj.get("badUserIds").toString()));
          }

          // validate the optional field `badUserIds` (array)
          for (int i = 0; i < jsonArraybadUserIds.size(); i++) {
            ReducedUserIdErrorDTO.validateJsonObject(jsonArraybadUserIds.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("unaffectedUsers") != null && !jsonObj.get("unaffectedUsers").isJsonNull()) {
        JsonArray jsonArrayunaffectedUsers = jsonObj.getAsJsonArray("unaffectedUsers");
        if (jsonArrayunaffectedUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unaffectedUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unaffectedUsers` to be an array in the JSON string but got `%s`", jsonObj.get("unaffectedUsers").toString()));
          }

          // validate the optional field `unaffectedUsers` (array)
          for (int i = 0; i < jsonArrayunaffectedUsers.size(); i++) {
            SuccessfulLocalTenantProfileAssignmentDTO.validateJsonObject(jsonArrayunaffectedUsers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("succeeded") != null && !jsonObj.get("succeeded").isJsonNull()) {
        JsonArray jsonArraysucceeded = jsonObj.getAsJsonArray("succeeded");
        if (jsonArraysucceeded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("succeeded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `succeeded` to be an array in the JSON string but got `%s`", jsonObj.get("succeeded").toString()));
          }

          // validate the optional field `succeeded` (array)
          for (int i = 0; i < jsonArraysucceeded.size(); i++) {
            SuccessfulLocalTenantProfileAssignmentDTO.validateJsonObject(jsonArraysucceeded.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessibleTenantProfileRevokeResponseDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessibleTenantProfileRevokeResponseDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessibleTenantProfileRevokeResponseDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessibleTenantProfileRevokeResponseDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessibleTenantProfileRevokeResponseDTO>() {
           @Override
           public void write(JsonWriter out, AccessibleTenantProfileRevokeResponseDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessibleTenantProfileRevokeResponseDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccessibleTenantProfileRevokeResponseDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessibleTenantProfileRevokeResponseDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessibleTenantProfileRevokeResponseDTO
  * @throws IOException if the JSON string is invalid with respect to AccessibleTenantProfileRevokeResponseDTO
  */
  public static AccessibleTenantProfileRevokeResponseDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessibleTenantProfileRevokeResponseDTO.class);
  }

 /**
  * Convert an instance of AccessibleTenantProfileRevokeResponseDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

