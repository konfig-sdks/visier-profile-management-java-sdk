/*
 * Visier Profile Management APIs
 * Visier APIs for managing the profiles assigned to users
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccessibleTenantProfileAssignmentRequestDTO;
import com.konfigthis.client.model.AccessibleTenantProfileAssignmentResponseDTO;
import com.konfigthis.client.model.AccessibleTenantProfileRevokeRequestDTO;
import com.konfigthis.client.model.AccessibleTenantProfileRevokeResponseDTO;
import com.konfigthis.client.model.AllProfileAssignedForAccessibleTenantDTO;
import com.konfigthis.client.model.AllProfileAssignedForLocalTenantDTO;
import com.konfigthis.client.model.LocalTenantProfileAssignmentRequestDTO;
import com.konfigthis.client.model.LocalTenantProfileAssignmentResponseDTO;
import com.konfigthis.client.model.LocalTenantProfileRevokeRequestDTO;
import com.konfigthis.client.model.LocalTenantProfileRevokeResponseDTO;
import com.konfigthis.client.model.ProfileGetAPIResponseDTO;
import com.konfigthis.client.model.ProfilesGetAPIResponseDTO;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TargetTenantCodeDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfileManagementApi
 */
@Disabled
public class ProfileManagementApiTest {

    private static ProfileManagementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProfileManagementApi(apiClient);
    }

    /**
     * Assign an analytic tenant profile to administrating tenant users
     *
     * This API allows you to assign an analytic tenant profile to a list of administrating tenant users  for a list of analytic tenants.   Note:   - Administrating tenants only.   - You can revoke a profile from a user with this request by updating the validityEndTime to be     \&quot;less than\&quot; the current time (that is, in the past).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignAnalyticProfileTest() throws ApiException {
        String profileId = null;
        List<String> targetUserIds = null;
        List<TargetTenantCodeDTO> targetTenantCodes = null;
        String validityStartTime = null;
        String validityEndTime = null;
        AccessibleTenantProfileAssignmentResponseDTO response = api.assignAnalyticProfile(profileId)
                .targetUserIds(targetUserIds)
                .targetTenantCodes(targetTenantCodes)
                .validityStartTime(validityStartTime)
                .validityEndTime(validityEndTime)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign a profile to a list of users
     *
     * This API allows you to assign a profile to a list of users. For administrating tenants,  this assigns an administrating tenant profile to a list of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignProfileTest() throws ApiException {
        String profileId = null;
        List<String> targetUserIds = null;
        String validityStartTime = null;
        String validityEndTime = null;
        LocalTenantProfileAssignmentResponseDTO response = api.assignProfile(profileId)
                .targetUserIds(targetUserIds)
                .validityStartTime(validityStartTime)
                .validityEndTime(validityEndTime)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of all profiles
     *
     * This API allows you to get a list of all available profiles. For administrating tenants,  this retrieves all administrating tenant profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllProfilesTest() throws ApiException {
        ProfilesGetAPIResponseDTO response = api.getAllProfiles()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the details of an analytic tenant profile
     *
     * This API allows you to get the details of an analytic tenant profile.   Note: Administrating tenants only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyticProfileDetailTest() throws ApiException {
        String profileId = null;
        ProfileGetAPIResponseDTO response = api.getAnalyticProfileDetail(profileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of analytic tenant profiles
     *
     * This API allows you to retrieve a list of profiles available for analytic tenants.   Note: Administrating tenants only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyticProfilesTest() throws ApiException {
        ProfilesGetAPIResponseDTO response = api.getAnalyticProfiles()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an administrating tenant user&#39;s analytic tenant profiles
     *
     * This API allows you to retrieve a specified user&#39;s assigned profiles for analytic tenants.   Note: Administrating tenants only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyticUserProfileTest() throws ApiException {
        String userId = null;
        AllProfileAssignedForAccessibleTenantDTO response = api.getAnalyticUserProfile(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the details of a profile
     *
     * This API allows you to get the details of a specific profile. For administrating tenants, this retrieves  the details of administrating tenant profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileDetailTest() throws ApiException {
        String profileId = null;
        ProfileGetAPIResponseDTO response = api.getProfileDetail(profileId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a user&#39;s profiles
     *
     * This API allows you to retrieve a specified user&#39;s assigned profiles. For administrating tenants,  this retrieves a user&#39;s administrating tenant profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserProfileTest() throws ApiException {
        String userId = null;
        AllProfileAssignedForLocalTenantDTO response = api.getUserProfile(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove an analytic tenant profile from administrating tenant users
     *
     * This API allows you to remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.   Note: Administrating tenants only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAnalyticProfileTest() throws ApiException {
        String profileId = null;
        List<String> targetUserIds = null;
        List<TargetTenantCodeDTO> targetTenantCodes = null;
        AccessibleTenantProfileRevokeResponseDTO response = api.removeAnalyticProfile(profileId)
                .targetUserIds(targetUserIds)
                .targetTenantCodes(targetTenantCodes)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a profile from a list of users
     *
     * This API allows you to remove a profile from a list of users. For administrating tenants, this  removes an administrating tenant profile from a list of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProfileTest() throws ApiException {
        String profileId = null;
        List<String> targetUserIds = null;
        LocalTenantProfileRevokeResponseDTO response = api.removeProfile(profileId)
                .targetUserIds(targetUserIds)
                .execute();
        // TODO: test validations
    }

}
